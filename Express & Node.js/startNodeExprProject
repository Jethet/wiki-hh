Starting a coding project with Node and Express

    Create a folder for the project on your computer	
You need an empty folder with the name of your project. 
If you have a directory for your programming, you can create the folder there. 
It does not matter, as long as you know where you put the folder so that you can find it.

    Open the folder with Visual Studio Code	
In VSC, go to File – Open and then go to the directory where you created your project 
folder. Click the folder once and click the button ‘Open’.

    Open the terminal of VSC	
In VSC, go to View – Terminal. On Mac, the shortcut is Ctrl ` (backtick). 
If you prefer, you can use a terminal outside of VSC.

    Check if you have Node installed	
In the terminal, type node –version. If Node is installed, you will see the version
in your terminal.
If you do not have Node, go to nodejs.org to download it (there is an explanation
how to download and install). 
You only have to install Node once, and it will remain on your computer always.

If you have Node installed, you can use the npm package manager (npmjs.com/).
There are thousands of packages available that you can use for your projects, 
for example to check if a username is valid, or to add the world-wide holidays 
to your project, or a database of locations – you name it.

    Initite your project
In the terminal, type npm init. 
You will see all sorts of text rolling in your terminal. That is all fine. 
At a certain moment, there will be questions in the terminal, such as:
the project's name, 
the project's initial version, 
the project's description,
etc.
You can skip all of these questions: just click enter all the time (the last 
question has “yes” at the end, and if you click enter there all questions are done).

If you do not change anything and just skip through the questions, then npm will 
automatically decide that index.js is your main file (entry point).
This will set up the npm package manager with a file called package.json. You need 
that file.
It will also set up the Node modules that you need. You do not have to look at those, 
the code will use the modules it needs all automatically, no worries.

Install all Node modules with the command npm i (or npm install). You will see all 
sorts of text rolling in your terminal. You will also see a package-lock.json file 
that is created automatically in the project folder. You don’t have anything to do 
with that.

    Install Express
Install Express for each new project: npm i express –save
You can see in the package.json file that Express has been added after you install it. 
That will happen with each package you install: it will be listed in the package.json 
file. You can check if you already have Express with express –-version.
(SEE: Using the Express generator, at the bottom of the text)

    First file: index.js	
If you have not changed the name of your ‘entry point’ when you 
went through the initiation (npm init), then your main file is index.js.

    Import Express in your index.js file.
To be able to use Express with Node, you have to import it in your main file (index.js).
Put at the top of your index.js file:
    const express = require(“express”)
    const app = express()
This is just a protocol, something you will always do in a project with Node and Express.

    Add port to index.js	
At the bottom of your index.js file, add the app listener with the port. You can do this
in various ways.

For a fixed port:
   app.listen(3000, () {
        console.log(“Listening on port 3000”)
        })

In case of flexibility (port can change):
app.listen(port, () => {
        console.log(`Listening on port ${port}.`)
        })
NB: this is using backticks (``) to be able to put a variable in text with ${}.
To use this way of indicating the port, you have to define the port somewhere in your
code, for example at the top:
    const port = 3000
 
    Run your code from the terminal	
Use the command node index.js to run your code. 
NB: when you use Node, the command is always node <filename>. So if your main file is 
called app.js, the command is node app.js. Don’t forget the .js !!

    Check localhost in your browser	
Go to your browser and type localhost:3000 as url. If all went well, you will see in 
your terminal the text you put for the listener (for example, Listening on port 3000). 
In the browser you will see your project running. To test it, make sure you have some
text somewhere, like “Hello World”, so that you can see the project is running correctly. 
In our example code, you see this with every route (app.get), there is a console.log 
that will print a line in the terminal so that you know the code is executed correctly. 
There is a res.send as response to the client, so that something is shown in the browser 
and then you know it works correctly.

    Optional: install nodemon	
To avoid having to kill and restart the server every time you make a change in the code,
you can use the Nodemon package:
npm install –save-dev nodemon
This should add nodemon to your package.json file.
Use the command  npm run dev to start the server. Whenever changes are made to the code, 
nodemon will automatically restart the server.

---------------------------------------------------------------------------------

Using the Express application generator

The Express development environment includes an installation of Nodejs, the NPM package 
manager, and (optionally) the Express Application Generator on your local computer.

Node and the NPM package manager are installed together from prepared binary packages, 
installers, operating system package managers or from source. Express is installed by
NPM as a dependency of your individual Express web applications (along with other 
libraries like template engines, database drivers, authentication middleware, middleware 
to serve static files, etc.)

NPM can also be used to (globally) install the Express Application Generator, a handy 
tool for creating skeleton Express web apps that follow the MVC pattern. 
The application generator is optional because you don't need to use this tool to create
apps that use Express, or construct Express apps that have the same architectural layout
or dependencies. But it makes getting started a lot easier, and promotes a modular 
application structure.

npm install express-generator -g

Possible errors:
When npm i does not create node_modules, you should delete package-lock.json and try npm install again.